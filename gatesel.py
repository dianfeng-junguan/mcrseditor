# Form implementation generated from reading ui file 'gatesel.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import json
class Gate:
    def __init__(self, name, size, ports):
        self.name = name
        self.size = size
        self.ports = ports
    def from_dict(d):
        return Gate(d['name'], d['size'], d['ports'])
    def to_dict(self):
        return {'name': self.name,'size': self.size, 'ports': self.ports}
class Ui_GateSelectMainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(637, 419)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listView = QtWidgets.QListView(parent=self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(0, 0, 361, 371))
        self.listView.setObjectName("listView")
        self.okButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.okButton.setGeometry(QtCore.QRect(430, 330, 121, 31))
        self.okButton.setObjectName("okButton")
        self.graphicsView = QtWidgets.QGraphicsView(parent=self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(370, 130, 256, 192))
        self.graphicsView.setObjectName("graphicsView")
        self.displayText = QtWidgets.QLabel(parent=self.centralwidget)
        self.displayText.setGeometry(QtCore.QRect(370, 10, 251, 101))
        font = QtGui.QFont()
        font.setFamily("SimSun-ExtB")
        font.setPointSize(16)
        self.displayText.setFont(font)
        self.displayText.setObjectName("displayText")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 637, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.listView.clicked.connect(self.on_list_selected)
        self.listView.doubleClicked.connect(self.on_ok_clicked)
        self.okButton.clicked.connect(self.on_ok_clicked)

        self.model=QtGui.QStandardItemModel(self.listView)
        self.gates={}
        self.read_gates()
        self.grid_size=30
        self.selected_gate = None
        MainWindow.setWindowModality(QtCore.Qt.WindowModality.ApplicationModal)
        self.main_window = MainWindow

    def set_grid_size(self, size):
        self.grid_size = size
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", " 选择门电路"))
        self.okButton.setText(_translate("MainWindow", "OK"))
        self.displayText.setText(_translate("MainWindow", "没有选中门"))
        
        self.graphicsView.setScene(QtWidgets.QGraphicsScene())
    
    def set_display_text(self, text):
        self.displayText.setText(text)
    
    def read_gates(self):
        #清除选项
        self.model.clear()
        #从gates.json中读取门电路信息
        with open('lib/gates.json', 'r', encoding='utf-8') as f:
            gates = json.load(f)
            self.gates = gates
        for k,v in gates.items():
            item = QtGui.QStandardItem(k)
            self.model.appendRow(item)
        self.listView.setModel(self.model)
    
    def on_list_selected(self, index):
        item = self.model.itemFromIndex(index)
        if item is None:
            self.set_display_text("没有选中门")
            self.graphicsView.setScene(QtWidgets.QGraphicsScene())
            return
        gate_name = item.text()
        self.set_display_text(f"你选择了{gate_name}门")
        #画出门电路
        scene = QtWidgets.QGraphicsScene()
        wire=self.gates[gate_name]['size']
        #每个门的数据为size和ports,size为(w,h),ports为[(x,y),...],表示线的端点坐标
        #画线
        rect=QtWidgets.QGraphicsRectItem(0, 0, wire[0]*self.grid_size, wire[1]*self.grid_size)
        rect.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 2))
        scene.addItem(rect)
        #画端点

        for port in self.gates[gate_name]['ports']:
            point = QtWidgets.QGraphicsRectItem(port[0]*self.grid_size, port[2]*self.grid_size, self.grid_size, self.grid_size)
            point.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 2))
            point.setBrush(QtGui.QBrush(QtGui.QColor(0, 255, 255)))
            scene.addItem(point)
        self.graphicsView.setScene(scene)
    
    def on_ok_clicked(self):
        item = self.model.itemFromIndex(self.listView.selectedIndexes()[0])
        if item is None:
            self.set_display_text("没有选中门")
            self.graphicsView.setScene(QtWidgets.QGraphicsScene())
            return
        gate_name = item.text()
        self.selected_gate = Gate(gate_name, self.gates[gate_name]['size'], self.gates[gate_name]['ports'])
        self.main_window.close()

