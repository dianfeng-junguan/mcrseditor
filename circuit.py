# Form implementation generated from reading ui file 'circuit.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from enum import Enum
import traceback
from PyQt6 import QtCore, QtGui, QtWidgets
import sys
from PyQt6.QtWidgets import QApplication, QWidget
from PyQt6.QtWidgets import QMainWindow
import json
import python_nbt.nbt as nbt
import pickle
from gatesel import *
class Point2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __add__(self, other):
        return Point2D(self.x + other.x, self.y + other.y)
    def __sub__(self, other):
        return Point2D(self.x - other.x, self.y - other.y)
    def __mul__(self, other):    # dot product
        return self.x * other.x + self.y * other.y
    def __abs__(self):
        return (self.x ** 2 + self.y ** 2) ** 0.5
    def __str__(self):
        return f"({self.x}, {self.y})"
    def __truediv__(self, other):
        return Point2D(self.x / other, self.y / other)
    def tolist(self):
        return [self.x, self.y]
    def __dict__(self):
        return {"x": self.x, "y": self.y}
class SelectMode(Enum):
    NONE=0
    GATE = 1
    WIRE_START = 2
    WIRE_END = 3
    DELETE=4
class Selection:
    def __init__(self, mode:SelectMode=SelectMode.NONE,items=[]):
        self.mode = mode
        self.items = items
    def to_dict(self):
        return {"mode": self.mode.value, "items": [item.__dict__() for item in self.items]}
class Circuit:
    '''
    保存电路结构信息
    '''
    def __init__(self):
        self.gates = []
        self.wires = []

    def add_gate(self, position,gate:Gate):
        self.gates.append([position, gate])
    def add_wire(self, start, end):
        self.wires.append([start, end])
    def remove_gate(self, gate):
        self.gates.remove(gate)
    def remove_wire(self, wire):
        self.wires.remove(wire)
    def clear(self):
        self.gates.clear()
        self.wires.clear()
    def to_dict(self):
        return {"gates": self.gates, "wires": self.wires}
class RenderConfig:
    '''
    绘制的一些设置，包括绘制原点等等
    '''
    #绘制原点
    render_origin = Point2D(0, 0)
    #绘制缩放比例
    render_scale = 100
    #上述两个变量，只是用于存储graphicsView的内置缩放比例和绘制原点，不会被用作绘制的依据
    #网格线的设置
    grid_num_rows = 48
    grid_num_cols = 48
    grid_spacing = 30
    def __init__(self,render_origin=Point2D(0, 0),render_scale=100,grid_num_rows=48,grid_num_cols=48,grid_spacing=30):
        self.render_origin = render_origin
        self.render_scale = render_scale
        self.grid_num_rows = grid_num_rows
        self.grid_num_cols = grid_num_cols
        self.grid_spacing = grid_spacing
    def to_dict(self):
        return {"render_origin": self.render_origin.tolist(), "render_scale": self.render_scale, "grid_num_rows": self.grid_num_rows, "grid_num_cols": self.grid_num_cols, "grid_spacing": self.grid_spacing}
class CircuitArchive:
    '''
    用于将电路存储到文件中的类
    因为pickle不能存储带有自定义函数的类，所以只能另外定义一个
    '''
    gates=[]
    wires=[]
    def __init__(self, circuit:Circuit):
        tmpgates = circuit.gates
        tmpwires = circuit.wires
        for gate in tmpgates:
            gate:Point2D
            self.gates.append(gate.tolist())
        # for wire in tmpwires:
        #     wire:QLineF
        #     self.wires.append(wire)
class GridItem(QtWidgets.QGraphicsItem):
    '''
    辅助网格线的类，用于绘制网格线
    '''
    def __init__(self, num_rows=10, num_cols=10, spacing=100, parent=None):
        super().__init__(parent)
        self.num_rows = num_rows
        self.num_cols = num_cols
        self.spacing = spacing

    def boundingRect(self):
        # 返回网格的边界矩形
        #由于地图理论上是无限大小，所以不应该有边界矩形
        #暂且使用很大很大的边界，当然边界要考虑绘制缩放比例
        return QtCore.QRectF(-10000, -10000,20000, 20000)
    
    def config_grid(self, num_rows, num_cols, spacing):
        self.num_rows = num_rows
        self.num_cols = num_cols
        self.spacing = spacing

    def paint(self, painter, option, widget=None):
        # 定义网格线的画笔
        pen = QtGui.QPen(QtGui.QColor(0, 0, 0), 1, QtCore.Qt.PenStyle.SolidLine)
        painter.setPen(pen)
        # 绘制横线
        for i in range(self.num_rows + 1):
            y = i * self.spacing
            painter.drawLine(0, y, self.num_cols * self.spacing, y)

        # 绘制竖线
        for i in range(self.num_cols + 1):
            x = i * self.spacing
            painter.drawLine(x, 0, x, self.num_rows * self.spacing)
        
class GateItem(QtWidgets.QGraphicsItem):
    def __init__(self, position, parent=None,size_in_pixel=QtCore.QSize(30, 30),gate_info:Gate=None):
        super().__init__(parent)
        self.position = position
        self.size_in_pixel = size_in_pixel
        self.gate_info = gate_info
        if self.gate_info:
            self.size_in_pixel = QtCore.QSize(self.gate_info.size[0]*render_config.grid_spacing, self.gate_info.size[1]*render_config.grid_spacing)
    def boundingRect(self):
        return QtCore.QRectF(self.position.x, self.position.y, self.size_in_pixel.width(), self.size_in_pixel.height())
    def paint(self, painter, option, widget=None):
        pen = QtGui.QPen(QtGui.QColor(0, 0, 0), 2, QtCore.Qt.PenStyle.SolidLine)
        painter.setPen(pen)
        #绘制的时候要考虑到绘制原点和缩放比例
        w,h=self.size_in_pixel.width(),self.size_in_pixel.height()
        painter.drawRect(self.position.x, self.position.y, self.size_in_pixel.width(), self.size_in_pixel.height())
        painter.drawText(self.position.x +w//2, self.position.y + h//2, self.gate_info.name)
        painter.setBrush(QtGui.QColor(255, 0, 255))
        #绘制端口
        if self.gate_info:
            for port in self.gate_info.ports:
                painter.drawRect(self.position.x + port[0]*render_config.grid_spacing, self.position.y + port[2]*render_config.grid_spacing, render_config.grid_spacing, render_config.grid_spacing)

class GraphicsView(QtWidgets.QGraphicsView):
    def __init__(self, *args, **kwargs):
        '''
        请务必parent参数，调用setPrivateSceneProperty方法设置私有场景属性
        '''
        super().__init__(*args, **kwargs)
        self.setDragMode(QtWidgets.QGraphicsView.DragMode.ScrollHandDrag)  # 允许拖动
        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.middleMouseButtonPressed = False
        self.gate_item = None
        self.selected_wire_start_item = None
        self.selected_wire_item = None
        self.setMouseTracking(True)

    def setPrivateSceneProperty(self, scene):
        '''
        设置私有场景属性，内部方法要用到
        '''
        self.__scene = scene
    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.MouseButton.MiddleButton:
            self.middleMouseButtonPressed = True
            self.middleMouseButtonPressPosition = event.position()
        super().mousePressEvent(event)

    def mouseMoveEvent(self, event):
        if select.mode == SelectMode.GATE:
            if self.gate_item:
                self.__scene.removeItem(self.gate_item)
            # 对齐到最近的网格点
            proto_pos=event.position()
            mapped_pos=self.mapToScene(int(proto_pos.x()), int(proto_pos.y()))
            grid_pos = self.snap_to_grid(mapped_pos)
            self.gate_item = GateItem(Point2D(int(grid_pos.x), int(grid_pos.y)), gate_info=select.items[0])
            self.__scene.addItem(self.gate_item)
            event.accept()
        elif select.mode == SelectMode.WIRE_START:
            #正在选择线路的起点，只显示一个大小的矩形
            if self.selected_wire_start_item:
                self.__scene.removeItem(self.selected_wire_start_item)
            # 对齐到最近的网格点
            proto_pos=event.position()
            mapped_pos=self.mapToScene(int(proto_pos.x()), int(proto_pos.y()))
            grid_pos = self.snap_to_grid(mapped_pos)
            select.items[0] = Point2D(int(grid_pos.x), int(grid_pos.y))
            self.selected_wire_start_item = QtWidgets.QGraphicsRectItem(QtCore.QRectF(select.items[0].x, select.items[0].y, render_config.grid_spacing, render_config.grid_spacing))
            self.selected_wire_start_item.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 2, QtCore.Qt.PenStyle.SolidLine))
            self.selected_wire_start_item.setBrush(QtGui.QColor(0, 0, 0))
            self.__scene.addItem(self.selected_wire_start_item)
            event.accept()
        elif select.mode == SelectMode.WIRE_END:
            if self.selected_wire_start_item:
                self.__scene.removeItem(self.selected_wire_start_item)
                self.selected_wire_start_item = None
            if self.selected_wire_item:
                self.__scene.removeItem(self.selected_wire_item)
                self.selected_wire_item = None
            #，从起点绘制到终点一条一格粗的线，这一条线只能是水平的或者竖直的，至于方向是由鼠标位置相对开始点的位移决定的
            proto_pos=event.position()
            mapped_pos=self.mapToScene(int(proto_pos.x()), int(proto_pos.y()))
            grid_pos = self.snap_to_grid(mapped_pos)
            start_pos = select.items[0]
            end_pos = Point2D(int(grid_pos.x), int(grid_pos.y))
            #根据相对位移得出是水平还是竖直的线
            if abs(grid_pos.x - start_pos.x) > abs(grid_pos.y - start_pos.y):
                #水平线
                end_pos = Point2D(int(grid_pos.x), int(start_pos.y))
            else:
                #竖直线
                end_pos = Point2D(int(start_pos.x), int(grid_pos.y))
            select.items[1]=end_pos
            #有的时候方向会向负方向，这样就需要修改start_pos和end_pos的位置
            #同时，负方向的时候，起点就没有被考虑在内，需要加上一个网格大小
            if end_pos.x < start_pos.x or end_pos.y < start_pos.y:
                start_pos, end_pos = end_pos, start_pos
                #FIXME 这里不正确，画出来会很长很长，一动还会变长
                # end_pos.x += render_config.grid_spacing
            #计算线大小
            size = [max(render_config.grid_spacing,abs(end_pos.x - start_pos.x)), max(render_config.grid_spacing,abs(end_pos.y - start_pos.y))]
            #向__scene添加rectitem来实现绘制直线
            rect = QtCore.QRectF(start_pos.x, start_pos.y, size[0], size[1])
            self.selected_wire_item =QtWidgets.QGraphicsRectItem(rect)
            self.selected_wire_item.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 2, QtCore.Qt.PenStyle.SolidLine))
            self.selected_wire_item.setBrush(QtGui.QColor(0, 0, 0))
            self.__scene.addItem(self.selected_wire_item)
            event.accept()
        elif self.middleMouseButtonPressed and event.buttons() & QtCore.Qt.MouseButton.MiddleButton:
            delta = event.position() - self.middleMouseButtonPressPosition
            # render_config.render_origin += Point2D(delta.x(), delta.y())
            self.middleMouseButtonPressPosition = event.position()
            # self.refresh_display()
            event.accept()
        super().mouseMoveEvent(event)

    def mouseReleaseEvent(self, event):
        if select.mode == SelectMode.GATE and self.gate_item:
            # 对齐到最近的网格点
            proto_pos=event.position()
            mapped_pos=self.mapToScene(int(proto_pos.x()), int(proto_pos.y()))
            end_pos = self.snap_to_grid(mapped_pos)
            final_pos=select.items[1]#Point2D(int(grid_pos.x), int(grid_pos.y))
            self.gate_item = GateItem(final_pos)
            current_circuit.add_gate(final_pos,Gate(select.items[0].name,select.items[0].size,select.items[0].ports))
            # self.__scene.removeItem(self.gate_item)
            self.gate_item = None
            select.mode = SelectMode.NONE
            # self.refresh_display()
            event.accept()
        elif select.mode == SelectMode.WIRE_START:
            select.mode = SelectMode.WIRE_END
            self.selected_wire_item = None
        elif select.mode == SelectMode.WIRE_END:
            #应该添加线路到current_circuit
            start_pos = select.items[0]
            end_pos = select.items[1]
            if end_pos.x < start_pos.x or end_pos.y < start_pos.y:
                start_pos, end_pos = end_pos, start_pos
            current_circuit.add_wire(start_pos, end_pos)
            select.mode = SelectMode.NONE
            select.items.clear()
        elif event.button() == QtCore.Qt.MouseButton.MiddleButton:
            self.middleMouseButtonPressed = False
        super().mouseReleaseEvent(event)

    def snap_to_grid(self, position):
        x = round(position.x() / render_config.grid_spacing) * render_config.grid_spacing
        y = round(position.y() / render_config.grid_spacing) * render_config.grid_spacing
        return Point2D(x, y)
#=================global variables=

opened_circuit = None
render_config = RenderConfig()
#选择数据
select=Selection()
current_circuit=Circuit()
#=================global variables end=
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(804, 605)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setAutoFillBackground(True)
        self.graphicsView = GraphicsView(parent=self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(0, 0, 801, 561))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graphicsView.sizePolicy().hasHeightForWidth())
        self.graphicsView.setSizePolicy(sizePolicy)
        self.graphicsView.setAutoFillBackground(True)
        self.graphicsView.setObjectName("graphicsView")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 804, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(parent=self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(parent=self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(parent=self.menubar)
        self.menu_3.setObjectName("menu_3")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionnew = QtGui.QAction(parent=MainWindow)
        self.actionnew.setObjectName("actionnew")
        self.actionnew.triggered.connect(self.new_circuit)
        self.actionsave = QtGui.QAction(parent=MainWindow)
        self.actionsave.setObjectName("actionsave")
        self.actionsave.triggered.connect(self.save_circuit)
        self.actionsave_as = QtGui.QAction(parent=MainWindow)
        self.actionsave_as.setObjectName("actionsave_as")
        self.actionsave_as.triggered.connect(self.save_as_circuit)
        self.actionopen = QtGui.QAction(parent=MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.actionopen.triggered.connect(self.open_circuit)
        self.actionclose = QtGui.QAction(parent=MainWindow)
        self.actionclose.setObjectName("actionclose")
        self.actionclose.triggered.connect(self.close_circuit)
        self.actionexport = QtGui.QAction(parent=MainWindow)
        self.actionexport.setObjectName("actionexport")
        self.actionexport.triggered.connect(self.export_circuit)
        self.actiongate = QtGui.QAction(parent=MainWindow)
        self.actiongate.setObjectName("actiongate")
        self.actiongate.triggered.connect(self.add_gate)
        self.actionwire = QtGui.QAction(parent=MainWindow)
        self.actionwire.setObjectName("actionwire")
        self.actionwire.triggered.connect(self.add_wire)
        self.actiondelete = QtGui.QAction(parent=MainWindow)
        self.actiondelete.setObjectName("actiondelete")
        self.actiondelete.triggered.connect(self.delete_item)
        self.menu.addAction(self.actionnew)
        self.menu.addAction(self.actionsave)
        self.menu.addAction(self.actionsave_as)
        self.menu.addAction(self.actionopen)
        self.menu.addAction(self.actionclose)
        self.menu.addAction(self.actionexport)
        self.menu_2.addAction(self.actiongate)
        self.menu_2.addAction(self.actionwire)
        self.menu_2.addAction(self.actiondelete)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())

        self.scene = QtWidgets.QGraphicsScene(parent=self.graphicsView)
        self.graphicsView.setScene(self.scene)
        self.graphicsView.setPrivateSceneProperty(self.scene)


        # 重写 wheelEvent
        self.graphicsView.wheelEvent = self.wheelEventOverride

        self.retranslateUi(MainWindow)
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.refresh_display()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Minecraft redstone circuit editor"))
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.menu_2.setTitle(_translate("MainWindow", "编辑"))
        self.menu_3.setTitle(_translate("MainWindow", "关于"))
        self.actionnew.setText(_translate("MainWindow", "新建"))
        self.actionnew.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionsave.setText(_translate("MainWindow", "保存"))
        self.actionsave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionsave_as.setText(_translate("MainWindow", "另存为"))
        self.actionsave_as.setShortcut(_translate("MainWindow", "Ctrl+Shift+S"))
        self.actionopen.setText(_translate("MainWindow", "打开"))
        self.actionopen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionclose.setText(_translate("MainWindow", "关闭"))
        self.actionexport.setText(_translate("MainWindow", "导出"))
        self.actionexport.setShortcut(_translate("MainWindow", "Ctrl+E"))
        self.actiongate.setText(_translate("MainWindow", "门电路"))
        self.actiongate.setShortcut(_translate("MainWindow", "Ctrl+G"))
        self.actionwire.setText(_translate("MainWindow", "线路"))
        self.actionwire.setShortcut(_translate("MainWindow", "Ctrl+R"))
        self.actiondelete.setText(_translate("MainWindow", "删除"))
        self.actiondelete.setShortcut(_translate("MainWindow", "Del"))

    def new_circuit(self):
        global current_circuit, opened_circuit
        #先保存已经打开的电路
        if opened_circuit:
            self.save_circuit()
            opened_circuit = None
        #新建电路
        current_circuit = Circuit()
        #刷新显示
        self.refresh_display()

    def refresh_display(self):
        #清空画布
        self.scene.clear()
        #绘制电路
        for gate in current_circuit.gates:
            self.draw_gate(gate)
        for wire in current_circuit.wires:
            self.draw_wire(wire)
        #绘制辅助定位用网格线
        self.draw_grid()

    def draw_grid(self):
        # 考虑绘制缩放比例
        #使用griditem
        grid_item = GridItem(render_config.grid_num_rows, render_config.grid_num_cols, render_config.grid_spacing)
        self.scene.addItem(grid_item)

    def draw_gate(self, gate):
        #绘制门电路
        gate_item = GateItem(gate[0],gate_info=gate[1])
        self.scene.addItem(gate_item)

    def draw_wire(self, wire):
        #绘制线路
        start_pos = wire[0]
        end_pos = wire[1]
        rect = QtCore.QRectF(start_pos.x, start_pos.y, max(render_config.grid_spacing,abs(end_pos.x - start_pos.x)), max(render_config.grid_spacing,abs(end_pos.y - start_pos.y)))
        rectitem=QtWidgets.QGraphicsRectItem(rect)
        rectitem.setPen(QtGui.QPen(QtGui.QColor(0, 0, 0), 2, QtCore.Qt.PenStyle.SolidLine))
        rectitem.setBrush(QtGui.QColor(0, 0, 0))
        self.scene.addItem(rectitem)
    def save_circuit(self):
        # 以json格式保存电路
        if not opened_circuit:  # 还没选定保存路径，先弹出文件选择窗口选择保存路径
            self.save_as_circuit()
        #设置render_config
        render_config.render_origin=Point2D(self.graphicsView.mapToScene(0,0).x(),self.graphicsView.mapToScene(0,0).y())
        render_config.render_scale=self.graphicsView.transform().m11()

        # 已经有保存路径，直接保存
        try:
            with open(opened_circuit, 'w') as f:
                #使用json保存，因为Point2D不能序列化也不能直接json.dumps,所以要对每一个gates中的Point2D转换成字典
                #然后再json.dumps
                gates_json = [gate.tolist() for gate in current_circuit.gates]
                wires_json = [wire.tolist() for wire in current_circuit.wires]
                data = {"gates": gates_json, "wires": wires_json}
                json.dump({"circuit":data, "select":select.to_dict(), "render_config":render_config.to_dict()}, f)
            print("saved circuit")
        except Exception as e:
            print(f"保存电路时发生错误: {e}")
            traceback.print_exc()

    def save_as_circuit(self):
        # 弹出文件选择窗口选择保存路径
        global opened_circuit
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(None, "保存电路", "", "MCRS Circuit Files (*.mcrs)")
        if filename:
            opened_circuit = filename
            self.save_circuit()

    def open_circuit(self):
        # 弹出文件选择窗口选择打开路径
        global opened_circuit, current_circuit, select, render_config
        filename, _ = QtWidgets.QFileDialog.getOpenFileName(None, "打开电路", "", "MCRS Circuit Files (*.mcrs)")
        if filename:
            try:
                with open(filename, 'rb') as f:
                    #因为json里面gates和wires都是用dict存储的，所以要每个dict表示的点转换成Point2D再存到current_circuit中
                    data=json.load(f)
                    gates_json=data["circuit"]["gates"]
                    wires_json=data["circuit"]["wires"]
                    gates=[Point2D(*gate) for gate in gates_json]
                    wires=[Point2D(*wire) for wire in wires_json]
                    current_circuit.gates=gates
                    current_circuit.wires=wires
                    select=Selection(**data["select"])
                    render_config=RenderConfig(**data["render_config"])
                opened_circuit = filename
                self.refresh_display()
            except Exception as e:
                print(f"打开电路时发生错误: {e}")


    def close_circuit(self):
        global opened_circuit, current_circuit, select, render_config
        #先保存已经打开的电路
        if opened_circuit:
            self.save_circuit()
            opened_circuit = None
        #清空画布
        self.graphicsView.clear()
        #清空选择数据
        select=Selection()
        #清空电路数据
        current_circuit=Circuit()
        #清空渲染设置
        render_config=RenderConfig()

    def export_circuit(self):
        # 弹出文件选择窗口选择保存路径
        global opened_circuit
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(None, "导出电路", "", "JSON Files (*.json)")
        if filename:
            # 将文件保存为nbt格式
            try:
                current_circuit.to_nbt(filename)
                print("导出电路成功")
            except Exception as e:
                print(f"导出电路时发生错误: {e}")

    def add_gate(self):
        #弹出添加门对话框
        gateselwndui.setupUi(gateselwnd)
        gateselwndui.set_grid_size(render_config.grid_spacing)
        gateselwnd.show()
        while gateselwnd.isVisible():
            app.processEvents()
        #选择完毕（show的时候会被阻塞）
        select.items.clear()
        if gateselwndui.selected_gate is None:
            print("未选择门")
            return
        select.items.append(gateselwndui.selected_gate)
        #选择完毕，更新选择模式
        select.mode=SelectMode.GATE
        #刷新显示    
        self.refresh_display()

    def add_wire(self):
        #更新选择模式
        select.mode=SelectMode.WIRE_START
        select.items.clear()
        select.items.append(Point2D(0,0))
        select.items.append(Point2D(0,0))
        #刷新显示    
        self.refresh_display()

    def delete_item(self):
        #更新选择模式
        select.mode=SelectMode.DELETE
        #刷新显示    
        self.refresh_display()

    def wheelEventOverride(self, event):
       # 使用 Ctrl + 鼠标滚轮 改变缩放比例
       if event.modifiers() & QtCore.Qt.KeyboardModifier.ControlModifier:
           zoomFactor = 1.15 if event.angleDelta().y() > 0 else 1 / 1.15
           self.graphicsView.scale(zoomFactor, zoomFactor)
           self.refresh_display()
           event.accept()
       else:
           # 默认的 wheelEvent 处理
           super(self.graphicsView.__class__, self.graphicsView).wheelEvent(event)
if __name__ == '__main__':
    app = QApplication(sys.argv)

    main_window = QMainWindow()
    w=Ui_MainWindow()
    w.setupUi(main_window)
    
    gateselwnd=QMainWindow()
    gateselwndui=Ui_GateSelectMainWindow()

    main_window.setWindowTitle('Minecraft redstone circuit editor')
    main_window.show()

    sys.exit(app.exec())
